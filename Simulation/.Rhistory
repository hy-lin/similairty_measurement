W
W <- c(2, 1, 1, 0.2)  # raw weights
w <- W/sum(W)           # normalized weights
w
sum(w)
W <- rep(1, nFeatures)  # raw weights
w <- W/sum(W)           # normalized weights
w
exemplars <- list()
prototype <- matrix(NA, 2, nFeatures)
cat <- 1
rep(cat-1.5, nFeatures)
sign(rep(cat-1.5, nFeatures))
cat <- 2
sign(rep(cat-1.5, nFeatures))
cat <- 1
prototype[cat,] <- sign(rep(cat-1.5, nFeatures))  # generates c(-1,-1,-1,-1) and c(1,1,1,1) for the 2 categories
prototype
exMatrix <- matrix(NA, nExemplars, nFeatures)     # initializes matrix of exemplars for current category
ex <- 1
runif(nFeatures)
runif(nFeatures)
runif(nFeatures)
runif(nFeatures)
rnd.unfi <- runif(nFeatures)
rnd.unfi
rnd.unfi - pFlip
sign(rnd.unfi - pFlip)
flip <- sign(rnd.unfi - pFlip)
flip
exMatrix[ex,] <- prototype[cat,] * flip  # flip a random subset of prototype features -> exemplar
exMatrix[1, ]
prototype
for (ex in 1:nExemplars) {
flip <- sign(runif(nFeatures)-pFlip)   # random draw of values between 0 and 1 --> a proportion pFlip of them is pushed below 0
exMatrix[ex,] <- prototype[cat,] * flip  # flip a random subset of prototype features -> exemplar
}
exMatrix
View(exMatrix)
View(exMatrix)
exMatrix[8, ]
exemplars[[cat]] <- exMatrix   # adds the matrix of exemplars of the current category to the list of all exemplars
exemplars
for (cat in 1:2) {                                  # order of learning does not matter, so we first learn cat 1, then cat 2
prototype[cat,] <- sign(rep(cat-1.5, nFeatures))  # generates c(-1,-1,-1,-1) and c(1,1,1,1) for the 2 categories
exMatrix <- matrix(NA, nExemplars, nFeatures)     # initializes matrix of exemplars for current category
for (ex in 1:nExemplars) {
flip <- sign(runif(nFeatures)-pFlip)   # random draw of values between 0 and 1 --> a proportion pFlip of them is pushed below 0
exMatrix[ex,] <- prototype[cat,] * flip  # flip a random subset of prototype features -> exemplar
}
exemplars[[cat]] <- exMatrix   # adds the matrix of exemplars of the current category to the list of all exemplars
}
exemplars
prob <- as.data.frame(matrix(NA, nProbes, 2))
names(prob) <- c("A", "B")
truecat <- 1
pr <- 1
flip <- sign(runif(nFeatures)-pFlip)
probe <- prototype[truecat,] * flip  # flip a random subset of prototype features -> probe
probe
dist <- matrix(NA, nExemplars, 2) # create an initially empty matrix of psychological distances to all exemplars
cat <- 1
ex<-1
exemplars[[cat]]
exemplars[[cat]][ex, ]
exemplars[[cat]][ex,]-probe
probe
(exemplars[[cat]][ex,]-probe)^2
w*(exemplars[[cat]][ex,]-probe)^2
sqrt(sum(w*(exemplars[[cat]][ex,]-probe)^2))
for (cat in 1:2) {    # loop over the 2 possible categories
for (ex in 1:nExemplars){ # loop over the exemplars learned for each possible category
dist[ex,cat] <- sqrt(sum(w*(exemplars[[cat]][ex,]-probe)^2))  # compare probe to each exemplar, compute distance
}
}
dist
sim <- exp(-c*dist)   # convert distance into similarity (for the entire dist matrix)
sim
View(sim)
View(sim)
sim[,1]
for (truecat in 1:2) {   # for each category, ...
for (pr in 1:nProbes) {   # ... generate several probes that truly belong to that category
flip <- sign(runif(nFeatures)-pFlip)
probe <- prototype[truecat,] * flip  # flip a random subset of prototype features -> probe
### apply GCM
dist <- matrix(NA, nExemplars, 2) # create an initially empty matrix of psychological distances to all exemplars
for (cat in 1:2) {    # loop over the 2 possible categories
for (ex in 1:nExemplars){ # loop over the exemplars learned for each possible category
dist[ex,cat] <- sqrt(sum(w*(exemplars[[cat]][ex,]-probe)^2))  # compare probe to each exemplar, compute distance
}
}
sim <- exp(-c*dist)   # convert distance into similarity (for the entire dist matrix)
prob[pr, truecat] <- sum(sim[,truecat])/sum(sim)  # probability of selecting the correct category ("truecat")
}
}
View(prob)
View(prob)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/GCM.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/GCM.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
source('C:/Users/user/Downloads/RandomWalk.R', echo=TRUE)
nReps <- 1000       #number of replications
listLength <- 9     #number of list items
initAct <- 1        #initial activation of each item
dRate <- 0.3        #decay rate
rRate <- 5          #rehearsal rate
rDuration <- 0.5    #duration of 1 rehearsal step
delay <- c(0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 7.5, 10)        #retention intervals (seconds)
minAct <- 0         #minimum activation for recall
noise <- 0.2        #standard deviation of noise on activation at recall
propCorrect <- rep(NA, length(dRate))
correct <- matrix(0, nReps, listLength);  #variable for recording correctness of recall of each item; initialized to 0
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
for (i in 1:listLength){
actVals <- actVals - dRate*eDuration
actVals[i] <- initAct
}
8:0
1:0
1:1
seq(1, 0, 1)
seq(1, 0, by = 1)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/SimpleSTM.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsal.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/SimpleSTM.R', echo=TRUE)
enc_index = 1
1:(enc_index-1)
enc_index = 2
1:(enc_index-1)
enc_index = 5
1:(enc_index-1)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsalSeqEncoding2.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsalSeqEncoding2.R', echo=TRUE)
(listLength-1):0
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsalSeqEncoding2.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsalSeqEncoding.R', echo=TRUE)
source('D:/Dropbox/workingDocuments/teaching/modeling2017/codes/DecayRehearsalSeqEncoding2.R', echo=TRUE)
ls
ls()
vector(5)
rep(0, times = 5*5, each = 5)
rep(0, times = 5*5, length.out = 5)
matrix(0, 5, 5)
seq(5)
help(random)
help('random')
sign(runif(5)-0.5)
sign(runif(5)-0.5)
sign(runif(5)-0.5)
sign(runif(5)-0.5)
sign(runif(5)-0.5)
sign(runif(5)-0.5)
sign(runif(5)-0.5)
sign(runif(5)-0.5)
sign(runif(5)-0.5)
sign(runif(5)-0.5)
sign(runif(5)-0.5)
sign(runif(5)-0.5)
createStimuli <- function(n_stimuli, noise_sd){
n_dimension <- n_stimuli
stimuli <- matrix(0, n_stimuli, n_dimension)
for (stimulus_index in seq(n_stimuli)){
stimuli[stimulus_index, ] <- sign(runif(n_dimension) - 0.5)
}
stimuli <- stimuli + rnorm(n_dimension*n_stimuli, mean = 0, sd = noise_sd)
return(stimuli)
}
createStimuli(5, 0.2)
createStimuli(5, 1.0)
createStimuli(5, 0.05)
dim(createStimuli(5, 0.05))
dim(createStimuli(5, 0.05))[1]
getSimilarity <- function(stimulus_one, stimulus_two){
return(sqrt(sum((stimulus_one - stimulus_two)^2)))
}
getSimilarityMatrix <- function(stimuli){
n_stimuli <- dim(stimuli)[1]
sim_matrix <- matrix(0, n_stimuli, n_stimuli)
for (stimulus_one in seq(n_stimuli)){
for (stimulus_two in seq(n_stimuli)){
sim_matrix[stimulus_one, stimulus_two] <- getSimilarity(stimuli[stimulus_one, ], stimulu[stimulus_two, ])
}
}
return(sim_matrix)
}
stimuli <- createStimuli(10, 0.05)
stimuli
getSimilarityMatrix(stimuli)
getSimilarityMatrix <- function(stimuli){
n_stimuli <- dim(stimuli)[1]
sim_matrix <- matrix(0, n_stimuli, n_stimuli)
for (stimulus_one in seq(n_stimuli)){
for (stimulus_two in seq(n_stimuli)){
sim_matrix[stimulus_one, stimulus_two] <- getSimilarity(stimuli[stimulus_one, ], stimuli[stimulus_two, ])
}
}
return(sim_matrix)
}
getSimilarityMatrix(stimuli)
source('~/GitHub/similairty_measurement/Simulation/core_functions.R', echo=TRUE)
stimuli <- createStimuli(20, 10)
source('~/GitHub/similairty_measurement/Simulation/core_functions.R', echo=TRUE)
stimuli <- createStimuli(20, 10)
stimuli
getSimilarityMatrix(stimuli)
sim_matrix <- getSimilarityMatrix(stimuli)
cmdscale(sim_matrix)
locs <- cmdscale(sim_matrix)
plot(locs[, 1], locs[, 2])
plot(locs[, 1], locs[, 2], type = 'n')
text(locs[, 1], locs[, 2])
sim_matrix[4, 9]
sim_matrix[1, 2]
sim_matrix[8, 12]
sim_matrix[9, 15]
getSimilarityMatrix(locs)
sim_matrix2 <- getSimilarityMatrix(locs)
library(phytools)
skewers(sim_matrix, sim_matrix2, method = 'unifcorrmat')
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
setwd("~/GitHub/similairty_measurement/Simulation")
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
true_similarity_matrix[c(1, 3, 5), c(1, 3, 5)]
N = 15
N/6
N//6
N%6
mode(N, 6)
N%%6
N%/%6
ceil(3.2)
floor
true_similarity_matrix[c(1, 3, 5, None), c(1, 3, 5, None)]
none
nan
na
NA
true_similarity_matrix[c(1, 3, 5, NA), c(1, 3, 5, NA)]
true_similarity_matrix[c(1, 3, 5, NaN), c(1, 3, 5, NaN)]
13 %% 8
1:0
getSubsets <- function(n_stimuli, n_stimuli_in_subsets){
n_subsets <- ceiling(n_stimuli / n_stimuli_in_subsets)
n_in_subsets <- rep(n_stimuli_in_subsets, n_subsets)
if (n_stimuli %% n_stimuli_in_subsets != 0){
unavaliable_items <- n_stimuli_in_subsets - n_stimuli %% n_stimuli_in_subsets
n_in_subsets <- n_in_subsets - unavaliable_items %/% n_subsets
if (unavaliable_items %% n_subsets != 0){
n_in_subsets[1:unavaliable_items %% n_subsets] <- n_in_subsets[1:unavaliable_items %% n_subsets] - 1
}
}
}
getSubsets(13, 8)
getSubsets <- function(n_stimuli, n_stimuli_in_subsets){
n_subsets <- ceiling(n_stimuli / n_stimuli_in_subsets)
n_in_subsets <- rep(n_stimuli_in_subsets, n_subsets)
if (n_stimuli %% n_stimuli_in_subsets != 0){
unavaliable_items <- n_stimuli_in_subsets - n_stimuli %% n_stimuli_in_subsets
n_in_subsets <- n_in_subsets - unavaliable_items %/% n_subsets
if (unavaliable_items %% n_subsets != 0){
n_in_subsets[1:unavaliable_items %% n_subsets] <- n_in_subsets[1:unavaliable_items %% n_subsets] - 1
}
}
return(n_in_subsets)
}
getSubsets(13, 8)
getSubsets(13, 9)
getSubsets(13, 5)
getSubsets(13, 4)
getSubsets(13, 2)
getSubsets(13, 13)
getSubsets(13, 20)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
a = list()
a[1] <- c(1,2 , 3)
a[[1] <- c(1,2 , 3)
a[[1]] <- c(1,2 , 3)
a
getSubsets <- function(n_stimuli, n_stimuli_in_subsets){
n_subsets <- ceiling(n_stimuli / n_stimuli_in_subsets)
n_in_subsets <- rep(n_stimuli_in_subsets, n_subsets)
if (n_stimuli %% n_stimuli_in_subsets != 0){
unavaliable_items <- n_stimuli_in_subsets - n_stimuli %% n_stimuli_in_subsets
n_in_subsets <- n_in_subsets - unavaliable_items %/% n_subsets
if (unavaliable_items %% n_subsets != 0){
n_in_subsets[1:unavaliable_items %% n_subsets] <- n_in_subsets[1:unavaliable_items %% n_subsets] - 1
}
}
subsets <- list()
current_item = 1
for (i in seq(n_subsets)){
subsets[[i]] <- seq(current_item, n_in_subsets[i])
}
return(subsets)
}
getSubsets(13, 2)
getSubsets <- function(n_stimuli, n_stimuli_in_subsets){
n_subsets <- ceiling(n_stimuli / n_stimuli_in_subsets)
n_in_subsets <- rep(n_stimuli_in_subsets, n_subsets)
if (n_stimuli %% n_stimuli_in_subsets != 0){
unavaliable_items <- n_stimuli_in_subsets - n_stimuli %% n_stimuli_in_subsets
n_in_subsets <- n_in_subsets - unavaliable_items %/% n_subsets
if (unavaliable_items %% n_subsets != 0){
n_in_subsets[1:unavaliable_items %% n_subsets] <- n_in_subsets[1:unavaliable_items %% n_subsets] - 1
}
}
subsets <- list()
current_item = 1
for (i in seq(n_subsets)){
subsets[[i]] <- seq(current_item, current_item + n_in_subsets[i])
current_item <- current_item + n_in_subsets[i]
}
return(subsets)
}
getSubsets(13, 2)
getSubsets <- function(n_stimuli, n_stimuli_in_subsets){
n_subsets <- ceiling(n_stimuli / n_stimuli_in_subsets)
n_in_subsets <- rep(n_stimuli_in_subsets, n_subsets)
if (n_stimuli %% n_stimuli_in_subsets != 0){
unavaliable_items <- n_stimuli_in_subsets - n_stimuli %% n_stimuli_in_subsets
n_in_subsets <- n_in_subsets - unavaliable_items %/% n_subsets
if (unavaliable_items %% n_subsets != 0){
n_in_subsets[1:unavaliable_items %% n_subsets] <- n_in_subsets[1:unavaliable_items %% n_subsets] - 1
}
}
subsets <- list()
current_item = 1
for (i in seq(n_subsets)){
subsets[[i]] <- seq(current_item, current_item + n_in_subsets[i]-1)
current_item <- current_item + n_in_subsets[i]
}
return(subsets)
}
getSubsets <- function(n_stimuli, n_stimuli_in_subsets){
n_subsets <- ceiling(n_stimuli / n_stimuli_in_subsets)
n_in_subsets <- rep(n_stimuli_in_subsets, n_subsets)
if (n_stimuli %% n_stimuli_in_subsets != 0){
unavaliable_items <- n_stimuli_in_subsets - n_stimuli %% n_stimuli_in_subsets
n_in_subsets <- n_in_subsets - unavaliable_items %/% n_subsets
if (unavaliable_items %% n_subsets != 0){
n_in_subsets[1:unavaliable_items %% n_subsets] <- n_in_subsets[1:unavaliable_items %% n_subsets] - 1
}
}
subsets <- list()
current_item = 1
for (i in seq(n_subsets)){
subsets[[i]] <- seq(current_item, current_item + n_in_subsets[i]-1)
current_item <- current_item + n_in_subsets[i]
}
return(subsets)
}
getSubsets(13, 2)
combination
permn(5)
permn
permutations(8, 2)
permutations(8, 2)
library("gtools", lib.loc="~/R/win-library/3.3")
permutations(8, 2)
combinations(8, 2)
combinations(4, 2)
length(combinations(4, 2))
source('~/GitHub/similairty_measurement/Simulation/core_functions.R', echo=TRUE)
a <- getSubsets(16, 4)
a
length(a)
length(combinations(4, 2))
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
subset_pairs <- combinations(length(subsets))
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
n_in_subsets <- 1
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
View(sub_similairty_matrix)
View(sub_similairty_matrix)
View(sub_similarity_matrix)
View(sub_similarity_matrix)
View(sub_similarity_matrix)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
View(MIS_result)
View(MIS_result)
View(measured_similarity_matrix)
View(measured_similarity_matrix)
View(sub_similairty_matrix)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
View(n_measurement)
View(n_measurement)
View(sub_similarity_matrix)
View(sub_similarity_matrix)
View(measured_similarity_matrix)
View(measured_similarity_matrix)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
warnings()
is.na
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
seq(1, 16)
seq(1, 16, step = 2)
seq(1, 16, by = 2)
seq(2, 16, by = 2)
for (i in seq(n_iter)){
stimuli <- createStimuli(n_stimuli, n_dimension, representation_noise)
true_similarity_matrix <- getSimilarityMatrix(stimuli)
for (n_in_subsets in seq(1, 8)){
rs[i][n_in_subsets] <- simMIRTValidity(stimuli, n_in_subsets, true_similarity_matrix)
}
}
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
warnings()
source('~/GitHub/similairty_measurement/Simulation/distortion_simulation.r', echo=TRUE)
rs <- data.frame(rs)
rs
ggplot(data = rs) + aes(variable, Name)
geom_tile(aes(fill = rescale), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue")
library('ggplot2')
ggplot(data = rs) + aes(variable, Name)
geom_tile(aes(fill = rescale), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue")
ggplot(data = rs) + aes(variable, Name) +
geom_tile(aes(fill = rescale), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue")
library(reshape2)
melt(rs)
ddply
library('plyr')
ddply
ddply(melt(rs), .(variable), transform, rescale = rescale(value))
library('scales')
ddply(melt(rs), .(variable), transform, rescale = rescale(value))
rs.m <- melt(rs)
rs <- data.frame(rs)
rs.m <- melt(rs)
rs.m
ggplot(data = rs) + aes(variable, Name) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue")
ggplot(data = rs.m) + aes(variable, Name) +
geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue")
rs <- data.frame(rs)
View(rs)
View(rs)
